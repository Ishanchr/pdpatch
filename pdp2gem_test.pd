#N canvas 380 87 1137 736 10;
#X obj 68 204 pdp_noise;
#X obj 68 85 metro 40;
#X obj 68 58 bng 15 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X obj 112 303 pdp_gain;
#X floatatom 240 518 5 0 0 0 - - -;
#X obj 68 514 pdp_blur;
#X obj 243 499 hsl 128 15 0 1 0 1 empty empty empty -2 -6 0 8 -262144
-1 -1 8100 1;
#X floatatom 240 233 5 0 0 0 - - -;
#X obj 243 208 hsl 128 15 0 5 0 1 empty empty empty -2 -6 0 8 -262144
-1 -1 10700 1;
#X floatatom 240 587 5 0 0 0 - - -;
#X obj 243 567 hsl 128 15 0 1 0 1 empty empty empty -2 -6 0 8 -262144
-1 -1 8200 1;
#X floatatom 239 307 5 0 0 0 - - -;
#X obj 242 288 hsl 128 15 -5 5 0 1 empty empty empty -2 -6 0 8 -262144
-1 -1 9920 1;
#X msg 15 339 reset;
#X obj 68 338 pdp_add;
#X obj 68 243 pdp_gain;
#X text 393 286 a |gain| > 1 ensures regeneration;
#X floatatom 119 56 5 0 0 0 - - -;
#X obj 68 582 pdp_motion_phase;
#X floatatom 133 338 5 0 0 0 - - -;
#X text 392 495 blur ensures spatial coupling (determines the speed
at which "blobs" move around the screen);
#X text 392 565 a motion phase effect to spice it up (this causes local
negative feedback around suddon changes);
#X msg 109 13 40;
#X msg 144 13 1000;
#X msg 146 119 type grey;
#X msg 147 90 type yv12;
#X text 393 206 mix in some noise to get it going (set blur to minimal
when starting so the added noise won't be blurred to black);
#X obj 68 363 pdp_del 50;
#X text 242 14 this example is like example03 with a zoom / rotation
object thrown in;
#X obj 68 480 pdp_zrot;
#X floatatom 239 377 5 0 0 0 - - -;
#X obj 242 358 hsl 128 15 0.1 10 1 1 empty empty empty -2 -6 0 8 -262144
-1 -1 10200 1;
#X floatatom 239 446 5 0 0 0 - - -;
#X obj 242 426 hsl 128 15 0 360 0 1 empty empty empty -2 -6 0 8 -262144
-1 -1 7800 1;
#X text 393 357 zoom;
#X msg 239 334 1;
#X msg 239 403 0;
#X msg 239 261 1;
#X text 392 420 rotation;
#X obj 785 288 pdp2gem;
#X obj 505 381 gemwin;
#X msg 537 164 create;
#X obj 821 239 gemhead;
#X msg 543 191 destroy;
#X msg 565 261 1;
#X msg 563 300 0;
#X floatatom 936 342 0 0 0 0 - - -;
#X obj 828 330 color;
#X msg 930 275 1 1 1;
#X msg 930 240 1 0 0;
#X text 587 70 this demonstrates how to create a red square;
#X text 916 203 change the color;
#X text 929 310 rotate the square;
#X text 535 141 create and destroy the graphics window;
#X text 607 276 turn rendering on and off;
#X msg 931 386 draw line;
#X msg 931 406 draw fill;
#X msg 934 459 width 1;
#X msg 935 479 width 10;
#N canvas 26 40 290 300 Gem.init 0;
#X obj 68 196 outlet;
#X obj 68 86 loadbang;
#X msg 68 136 reset;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X restore 563 357 pd Gem.init;
#X obj 828 381 rotate;
#X obj 738 340 pix_texture;
#X obj 828 423 cube;
#X connect 0 0 15 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 3 0 14 1;
#X connect 5 0 18 0;
#X connect 6 0 4 0;
#X connect 6 0 5 1;
#X connect 8 0 7 0;
#X connect 8 0 15 1;
#X connect 10 0 9 0;
#X connect 10 0 18 1;
#X connect 12 0 11 0;
#X connect 12 0 3 1;
#X connect 13 0 27 0;
#X connect 14 0 27 0;
#X connect 15 0 14 0;
#X connect 17 0 1 1;
#X connect 18 0 3 0;
#X connect 19 0 27 1;
#X connect 22 0 17 0;
#X connect 23 0 17 0;
#X connect 24 0 0 0;
#X connect 25 0 0 0;
#X connect 27 0 29 0;
#X connect 27 0 39 0;
#X connect 29 0 5 0;
#X connect 30 0 29 1;
#X connect 31 0 30 0;
#X connect 32 0 29 2;
#X connect 33 0 32 0;
#X connect 35 0 31 0;
#X connect 36 0 33 0;
#X connect 37 0 12 0;
#X connect 39 0 61 0;
#X connect 41 0 40 0;
#X connect 42 0 39 0;
#X connect 43 0 40 0;
#X connect 44 0 40 0;
#X connect 45 0 40 0;
#X connect 46 0 60 1;
#X connect 47 0 60 0;
#X connect 48 0 47 1;
#X connect 49 0 47 1;
#X connect 55 0 62 0;
#X connect 56 0 62 0;
#X connect 57 0 62 0;
#X connect 58 0 62 0;
#X connect 59 0 40 0;
#X connect 60 0 62 0;
#X connect 61 0 60 0;
